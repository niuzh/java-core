/**
 * 脚本、编译与注解处理
 * Java平台的脚本
 * 	获取脚本引擎：可以执行脚本语言的类库
 * 	脚本赋值与绑定：引擎作用域赋值取值。
 * 	重定向输入和输出：输入输出定向到指定的对象中。
 * 	调用脚本的函数和方法：可以执行脚步方法或者定义脚本对象执行接口方法。
 * 	编译脚本：重复执行时处于效率的考虑。
 * 	一个示例用脚本处理GUI事件
 * 编译器API
 * 	编译便捷之法：JavaCompiler.run();
 * 	使用编译工具
 * 	一个示例动态Java代码生成：通过构件一个现有类的子类源码并编译，编译后代码放入内存，使用类加载器使用。
 * 使用注解：注解是放入源代码中，编译后使用工具进行操作的标签。
 * 注解语法
 * 	用于编译的注解
 * 标准注解
 * 	用于编译的注解：编译时进行判断处理。
 * 	用于管理资源的注解：@PostConstruct,@PreDestroy,@Resource处理对象时调用方法或者注入资源。
 * 	元注解:@Target,@Retention,@Documented
 * 源码级注解处理:通过例子演示了如何使用注解处理器通过源代码文件产生其他文件，先编译注解处理器，然后在编译器命令中指定-processor 处理器 源代码文件
 * 字节码工程：可以在编译完后修改字节码，也可以在加载类时安张字节码转换器。
 * @author niuzhihuan
 */
package v2.ch10;