/**
 * 泛型程序设计
 * 为什么要使用泛型程序设计：使代码具有更好的可读性和安全性。
 * 定义简单泛型类
 * 泛型方法
 * 类型变量的限定
 * 泛型代码和虚拟机
 * 	翻译泛型表达式
 * 	翻译泛型方法
 * 	调用遗留代码
 * 约束与局限性
 * 	不能用基本类型实例化类型参数
 * 	运行时类型查询只适用于原始类型
 * 	不能创建参数化类型的数组
 * 	Varargs警告
 * 	不能实例化类型变量
 * 	泛型类的静态上下文中类型变量无效
 * 	不能抛出或捕获泛型类的实例
 * 	注意擦除后的冲突
 * 泛型类型的继承规则
 * 通配符类型
 * 	通配符的超类型限定
 * 	无限定通配符
 * 	通配符捕获
 * 反射和泛型
 * 	使用Class<T>参数进行类型匹配
 * 	虚拟机中的泛型类型信息
 * @author niu
 */
package v1.ch12;